module bi (A : Set) where

open import Agda.Primitive
open import Prelude.Decidable
open import Prelude.List renaming ([] to ‚ü®‚ü©)
open import Prelude.Monoidal.Coproduct
open import Prelude.Monoidal.Coproduct.Indexed
open import Prelude.Monoidal.Product
open import Prelude.Monoidal.Product.Indexed
open import Prelude.Natural
open import Prelude.Path
open import Prelude.Size
open import Prelude.Stream

open List
  using (_++_)
open Stream
  renaming (module Stream to point)
  using (take)

-- a choice sequence, or point in the universal spread
point : ..{s : Size} ‚Üí Set
point {s} = Stream {s} A
{-# DISPLAY Stream A = point #-}

-- a finite approximation of a choice sequence (a neighborhood / open set)
neigh : ..{s : Size} ‚Üí Set
neigh {s} = List {s} A
{-# DISPLAY List A = neigh #-}

_‚å¢_ : neigh ‚Üí A ‚Üí neigh
‚ü®‚ü© ‚å¢ x = x ‚à∑ ‚ü®‚ü©
(x ‚à∑ U) ‚å¢ y = x ‚à∑ (U ‚å¢ y)

-- From a point, make an observation of a particular precision
_[_] : point ‚Üí Nat ‚Üí neigh
Œ± [ n ] = take n Œ±
{-# DISPLAY take n Œ± = Œ± [ n ] #-}

-- A point lies in an open set when the latter is a prefix of the former
data _‚àà_ ..{sp}..{sn} : point {sp} ‚Üí neigh {sn} ‚Üí Set where
  ‚ü®‚ü©
    : ‚àÄ {Œ±}
    ‚Üí _‚àà_ {sp}{sn} Œ± ‚ü®‚ü©
  step
    : ‚àÄ ..{sp‚Ä≤ : Size.< sp}..{sn‚Ä≤ : Size.< sn}
    ‚Üí ‚àÄ {Œ± : point {sp}} {U : neigh {sn‚Ä≤}}
    ‚Üí _‚àà_ {sp‚Ä≤}{sn‚Ä≤} (point.tail Œ±) U
    ‚Üí _‚àà_ {sp }{sn } Œ± (point.head Œ± ‚à∑ U)

‚àà-step-back : ‚àÄ ..{sp}..{sn} {Œ± : point {sp}} {U : neigh {sn}} {m : A} ‚Üí Œ± ‚àà (U ‚å¢ m) ‚Üí Œ± ‚àà U
‚àà-step-back {U = ‚ü®‚ü©} p = ‚ü®‚ü©
‚àà-step-back {U = ._ ‚à∑ U} (step p) = step (‚àà-step-back p)

species : Set (lsuc lzero)
species = neigh ‚Üí Set

_‚äë_ : species ‚Üí species ‚Üí Set
ùîÑ ‚äë ùîÖ =
  {U : neigh}
    ‚Üí ùîÑ U
    ‚Üí ùîÖ U

-- A species of neighborhoods can be viewed as a collection of points,
-- so we notation for quantifying over points in a species.
infix 0 ‚àÄ‚àà
‚àÄ‚àà : (U : neigh) (P : point ‚Üí Set) ‚Üí Set
‚àÄ‚àà U P = (Œ± : point) ‚Üí Œ± ‚àà U ‚Üí P Œ±
syntax ‚àÄ‚àà U (Œª Œ± ‚Üí P) = ‚àÄ[ Œ± ‚àà U ] P

-- First, we fix an extensional/semantic explanation of what it means for
-- a species [ùîÖ] to bar a node [U], written [ÃÑ‚ä® U ‚óÉ ùîÖ]. When [U] is in [ùîÖ],
-- we say that [U] is *secured*; when [ùîÖ] bars [U], we say that [U] is
-- *securable*.
‚ä®_‚óÉ_ : neigh ‚Üí species ‚Üí Set
‚ä® U ‚óÉ ùîÖ = ‚àÄ[ Œ± ‚àà U ] Œ£[ Nat ‚àã n ] ùîÖ (Œ± [ n ])

-- Next, a syntactic/proof-theoretic characterization of securability inferences is
-- defined. Proofs are infinitely-broad wellfounded trees.
data ‚ä¢_‚óÉ_ (U : neigh) (ùîÖ : species) : Set where
  -- [U] is secured.
  Œ∑ : ùîÖ U ‚Üí ‚ä¢ U ‚óÉ ùîÖ

  -- [U] is securable because all of its immediate children are securable.
  œù : (‚àÄ x ‚Üí ‚ä¢ (U ‚å¢ x) ‚óÉ ùîÖ) ‚Üí ‚ä¢ U ‚óÉ ùîÖ

-- Fix a decidable bar [ùîÖ].
module _ (ùîÖ : species) (ùîÖ? : ‚àÄ U ‚Üí Decidable (ùîÖ U)) where
  -- The crux of the bar principle is essentially a completeness theorem:
  -- if [ùîÖ] bars [U], then we have a proof that it does. We can implement
  -- the procedure for completeness effectively, but in order to prove that
  -- it is a total function, we would need bar induction (which we are
  -- in the process of proving).
  {-# TERMINATING #-}
  completeness
    : (U : neigh)
    ‚Üí ‚ä® U ‚óÉ ùîÖ
    ‚Üí ‚ä¢ U ‚óÉ ùîÖ
  completeness U p with ùîÖ? U
  completeness U p | ‚äï.inl q =
    œù Œª t ‚Üí
      completeness
        (U ‚å¢ t)
        (Œª Œ± ‚Üí p Œ± Œ†.‚üî ‚àà-step-back)
  completeness U p | ‚äï.inr q = Œ∑ q

  module BI (ùîÑ : species) (ùîÖ‚äëùîÑ : ùîÖ ‚äë ùîÑ) (hered : ‚àÄ U ‚Üí (‚àÄ m ‚Üí ùîÑ (U ‚å¢ m)) ‚Üí ùîÑ U) where
    replace
      : (U : neigh)
      ‚Üí (‚ä¢ U ‚óÉ ùîÖ)
      ‚Üí ùîÑ U
    replace U (Œ∑ ùîÖ[U]) = ùîÖ‚äëùîÑ ùîÖ[U]
    replace U (œù ùíü[_]) = hered U Œª m ‚Üí replace (U ‚å¢ m) ùíü[ m ]

    bar-induction
      : ‚ä® ‚ü®‚ü© ‚óÉ ùîÖ
      ‚Üí ùîÑ ‚ü®‚ü©
    bar-induction p =
      replace ‚ü®‚ü©
        (completeness ‚ü®‚ü© p)
